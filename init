#!/usr/bin/env python3
import sys
import os
import glob

from init_lib.utils import iprint, eprint, sprint, crun
from init_lib import TestMain

STUNAME = "221180115-黄文睿"


class CommandSpace:
    def bear(self, *_: str):
        self.clean()
        crun("bear -- make -B")

    def build(self, *_: str, clean_build: bool = False):
        if clean_build:
            self.clean()
        crun("make")

    def b(self, *args: str):
        self.build(*args)

    def cb(self, *args: str):
        self.build(*args, clean_build=True)

    def clean(self, *_: str):
        crun("make clean")

    def format(self, *_: str):
        suffixes = ["c", "cc", "cpp", "h", "hpp"]
        files = []
        for suffix in suffixes:
            files.extend(glob.glob(f"./src/*.{suffix}"))
            files.extend(glob.glob(f"./tests/*.{suffix}"))
        crun(f"clang-format -i {' '.join(files)}")

    def test(self, *test_patterns: str):
        self.build()
        test_arg = " ".join(test_patterns)
        iprint("===== Unit        Tests =====")
        crun(f"make testvg ARGS='{test_arg}'")
        iprint("")
        iprint("===== Integration Tests =====")
        test_main = TestMain()
        tests: list[str] = sorted([f for f in dir(TestMain) if not f.startswith("_")])
        tests_run: list[str] = []
        tests_filtered: list[str] = []
        tests_not_found: list[str] = []
        pos_pattern = (
            [p for p in test_patterns if not p.startswith("-") and not p.startswith("+")] +
            [p[1:] for p in test_patterns if p.startswith("+")
        ])  # fmt: skip
        neg_pattern = [p[1:] for p in test_patterns if p.startswith("-")]
        for t in tests:
            if (not pos_pattern or any(pattern in t for pattern in pos_pattern)) and (
                not neg_pattern or not any(pattern in t for pattern in neg_pattern)
            ):
                if hasattr(test_main, t):
                    tests_run.append(t)
                else:
                    tests_not_found.append(t)
            else:
                tests_filtered.append(t)
        iprint("tests to run    : ", end="")
        sprint(" ".join(tests_run))
        iprint("tests filtered  : ", end="")
        sprint(" ".join(tests_filtered))
        iprint("tests not found : ", end="")
        sprint(" ".join(tests_not_found))
        iprint("")
        for t in tests_run:
            iprint(":: Start running test: ", end="")
            sprint(t)
            getattr(test_main, t)()
            iprint(":: End   running test: ", end="")
            sprint(t)
        iprint("All tests finished")

    def t(self, *args: str):
        self.test(*args)

    def prepare(self, *_: str):
        self.clean()
        if not os.path.exists("./build"):
            crun("mkdir ./build")
        crun("cp -r ./Original-Lab ./build/Lab")
        suffixes = ["c", "h", "l", "y"]
        files = []
        files_to_delete = []
        for suffix in suffixes:
            files.extend(glob.glob(f"./src/*.{suffix}"))
            files_to_delete.extend(glob.glob(f"./build/Lab/Code/*.{suffix}"))
        crun(f"rm -f {' '.join(files_to_delete)}")
        crun(f"cp {' '.join(files)} ./build/Lab/Code")
        iprint("Preparation done. Try to compile")
        crun("cd ./build/Lab/Code/ && make")
        crun("cp ./build/Lab/Code/parser ./build/Lab/parser")
        iprint("Compilation done. Try to test")
        crun("cd ./build/Lab/Code/ && make test")


#     def report(self, *_: str):
#         crun(f"typst c report/report.typ {STUNAME}.pdf")
#
#     def zip(self, *_: str):
#         self.report()
#         crun("mkdir -p ./build")
#         submit_dir = "./build/fla-submit"
#         crun(f"rm -rf {submit_dir}")
#         crun(f"mkdir -p {submit_dir}")
#         crun(
#             f"cp -r fla-project README.md pda tm CMakeLists.txt {STUNAME}.pdf -t {submit_dir}"
#         )
#         crun(
#             f"rm -f {submit_dir}/pda/anbn.pda {submit_dir}/tm/palindrome_detector_2tapes.tm"
#         )
#         crun(
#             f"""\
# cd {submit_dir}
# rm ../{STUNAME}.zip
# zip -r ../{STUNAME}.zip *
# cp ../{STUNAME}.zip ~/Downloads
# """
#         )


def print_help_and_quit():
    functions = "|".join([f for f in dir(CommandSpace) if not f.startswith("_")])
    print(f"Usage: {sys.argv[0]} {{{functions}}}")
    sys.exit(1)


def run():
    if len(sys.argv) <= 1:
        print_help_and_quit()
    cs = CommandSpace()
    if hasattr(cs, sys.argv[1]):
        getattr(cs, sys.argv[1])(*sys.argv[2:])
    else:
        eprint(f"Unknown command: {sys.argv[1]}\n")
        print_help_and_quit()


if __name__ == "__main__":
    run()
